'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Equalizer = function (_Component) {
  _inherits(Equalizer, _Component);

  function Equalizer() {
    _classCallCheck(this, Equalizer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Equalizer).call(this));

    _this.handleResize = (0, _lodash2.default)(_this.handleResize.bind(_this), 50);
    _this.updateChildrenHeights = _this.updateChildrenHeights.bind(_this);
    return _this;
  }

  _createClass(Equalizer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.handleResize();
      addEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      removeEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.handleResize();
    }
  }, {
    key: 'handleResize',
    value: function handleResize() {
      setTimeout(this.updateChildrenHeights, 0);
    }
  }, {
    key: 'updateChildrenHeights',
    value: function updateChildrenHeights() {
      var _props = this.props;
      var property = _props.property;
      var byRow = _props.byRow;
      var enabled = _props.enabled;

      var node = _reactDom2.default.findDOMNode(this);

      if (!enabled(this, node)) {
        return;
      }

      if (node !== undefined) {
        var children = this.props.nodes(this, node);
        var heights = this.constructor.getHeights(children, byRow);

        for (var row = 0; row < heights.length; row++) {
          var max = heights[row][heights[row].length - 1];

          for (var i = 0; i < heights[row].length - 1; i++) {
            heights[row][i][0].style[property] = max + 'px';
          }
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var children = _props2.children;
      var property = _props2.property;
      var byRow = _props2.byRow;
      var enabled = _props2.enabled;
      var nodes = _props2.nodes;

      var otherProps = _objectWithoutProperties(_props2, ['children', 'property', 'byRow', 'enabled', 'nodes']);

      return _react2.default.createElement(
        'div',
        otherProps,
        children
      );
    }
  }], [{
    key: 'getHeights',
    value: function getHeights(nodes) {
      var byRow = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var lastElTopOffset = 0,
          groups = [],
          row = 0;

      groups[row] = [];

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];

        node.style.height = 'auto';
        node.style.maxHeight = '';
        node.style.minHeight = '';

        var elOffsetTop = node.offsetTop;
        var elHeight = node.offsetHeight;

        if (i === 0) {
          lastElTopOffset = elOffsetTop;
        }

        if (elOffsetTop != lastElTopOffset && byRow) {
          row++;
          groups[row] = [];
          lastElTopOffset = elOffsetTop;
        }

        groups[row].push([node, elHeight]);
      }

      for (var j = 0; j < groups.length; j++) {
        var heights = groups[j].map(function (item) {
          return item[1];
        });
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }

      return groups;
    }
  }]);

  return Equalizer;
}(_react.Component);

exports.default = Equalizer;


Equalizer.defaultProps = {
  property: 'height',
  byRow: true,
  enabled: function enabled() {
    return true;
  },
  nodes: function nodes(component, node) {
    return node.children;
  }
};

Equalizer.propTypes = {
  children: _react2.default.PropTypes.node.isRequired,
  property: _react2.default.PropTypes.string,
  byRow: _react2.default.PropTypes.bool,
  enabled: _react2.default.PropTypes.func,
  nodes: _react2.default.PropTypes.func
};